class Solution {
    public String longestPalindrome(String s) {
        int j = 0, k = 0;
        String fin = "";
        if (s.length() == 1) return Character.toString((s.charAt(0)));
        if (s.length() == 2) {
            if (s.charAt(0) == s.charAt(1)) return s;
            else {
                return Character.toString((s.charAt(0)));
            }
        }
        for (int i = 1; i < s.length() - 1; i++) {
            j = i - 1;
            k = i + 1;
            String sub = "";
            String sub1 = "";
            String sub2 = "";
            while (s.charAt(j) == s.charAt(k)) {
                if (j == 0 || k == s.length() - 1) {
                    break;
                } else {
                    --j;
                    ++k;
                }
            }
            if (s.charAt(j) != s.charAt(k)) {
                j++;
                k--;
            }
            sub = s.substring(j, k + 1);

            if (s.charAt(i) == s.charAt(i + 1)) {
                j = i - 1;
                k = i + 2;
                if (k < s.length()) {

                    while (s.charAt(j) == s.charAt(k)) {
                        if (j == 0 || k == s.length() - 1) {
                            break;
                        } else {
                            --j;
                            ++k;
                        }
                    }
                } else {
                    j = i;
                    k = i + 1;
                }
            }
            if (s.charAt(j) != s.charAt(k)) {
                j++;
                k--;
            }
            sub1 = s.substring(j, k + 1);

            if (s.charAt(0) == s.charAt(1)) {
                j = 0;
                k = 1;

                sub2 = s.substring(j, k + 1);
            }
            if (sub2.length() > sub1.length()) sub1 = sub2;
            if (sub1.length() > sub.length())  sub = sub1;
            if (sub.length() > fin.length()) fin = sub;
            
        }
        return fin;
    }
}
